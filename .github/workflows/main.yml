# This is a basic workflow that is manually triggered

name: 'Build and deploying the docker images to Azure Cloud Registry (ACR)'

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-container-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Docker login to ACR
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_SERVER_NAME }}
          username: ${{ secrets.AZURE_REPO_USERNAME }}
          password: ${{ secrets.AZURE_REPO_PASSWORD }}

      # Getting the short form of the SHA
      - name: Get the head of github.sha
        id: short_form_github_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        
      # Runs a single command using the runners shell
      - name: Build the User Interface (React)
        run: |
          cd mdi_frontend
          docker build -t ${{ secrets.AZURE_SERVER_NAME }}/medical-drug-information_interface:${{ steps.short_form_github_sha.outputs.sha_short }} .
          docker push ${{ secrets.AZURE_SERVER_NAME }}/medical-drug-information_interface:${{ steps.short_form_github_sha.outputs.sha_short }}

      # Runs a set of commands using the runners shell
      - name: Build the Web server (python)
        run: |
          cd mdi_backend
          docker build -t ${{ secrets.AZURE_SERVER_NAME }}/medical-drug-information_webserver:${{ steps.short_form_github_sha.outputs.sha_short }} .
          docker push ${{ secrets.AZURE_SERVER_NAME }}/medical-drug-information_webserver:${{ steps.short_form_github_sha.outputs.sha_short }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-container-image
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      
      # Docker login to ACR
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_SERVER_NAME }}
          username: ${{ secrets.AZURE_REPO_USERNAME }}
          password: ${{ secrets.AZURE_REPO_PASSWORD }}
          
          
      # Getting the short form of the SHA
      - name: Get the head of github.sha
        id: short_form_github_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        
        
#       # Getting the container app extension and azure cli
#       - name: Get the container app extension and azure cli
#         run: |
#           echo "Installing containerapp extension"
#           az extension add --source https://workerappscliextension.blob.core.windows.net/azure-cli-extension/containerapp-0.2.0-py2.py3-none-any.whl --yes
        
        
      # Logging into the azure cli using service priniciple
      - name: Logging into the azure cli using service priniciple
        run: |
          echo "Logging into application"
          az login --service-principal --username ${{ secrets.AZURE_SERVICE_PRINICIPLE_APPID }} --password ${{ secrets.AZURE_SERVICE_PRINICIPLE }} --tenant ${{ secrets.AZURE_SERVICE_PRINICIPLE_TENANTID }}
          
          
      # Display the container app details
      - name: Displaying the exisiting container app details
        run: |
          echo "Displaying the medical-information-ui container app details"
          az containerapp show -n medical-information-ui -g gatech_related_apps
          echo "Displaying the medical-information-backend container app details"
          az containerapp show -n medical-information-backend -g gatech_related_apps


      - name: 'Deploy Container App'
        uses: Azure/cli@v1    
        with:
          inlineScript: |
            echo "Installing containerapp extension"
            az extension add --source https://workerappscliextension.blob.core.windows.net/azure-cli-extension/containerapp-0.2.4-py2.py3-none-any.whl --yes
            echo "Displaying the medical-information-backend container app details"
            az containerapp show -n medical-information-backend -g gatech_related_apps
            echo "Started Deploying to containerapp (User Interface)"
            az containerapp update --name medical-information-ui --resource-group gatech_related_apps --image ${{ secrets.AZURE_SERVER_NAME }}/medical-drug-information_interface:${{ steps.short_form_github_sha.outputs.sha_short }}
            echo "Deployed to containerapp (User Interface)"
            echo "Started deploying to containerapp (webserver)"
            az containerapp update -n medical-information-backend -g gatech_related_apps -i ${{ secrets.AZURE_SERVER_NAME }}/medical-drug-information_webserver:${{ steps.short_form_github_sha.outputs.sha_short }}
            echo "Deployed to containerapp (Web server)"





